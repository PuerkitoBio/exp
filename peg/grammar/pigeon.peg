{
package main
}

Grammar ← __ initializer:( Initializer __ )? rules:( Rule __ )+ {
    pos := c.astPos()

    // create the grammar, assign its initializer
    g := ast.NewGrammar(pos)
    initSlice := toIfaceSlice(initializer)
    if len(initSlice) > 0 {
        g.Init = initSlice[0].(*ast.CodeBlock)
    }

    rulesSlice := toIfaceSlice(rules)
    g.Rules = make([]*ast.Rule, len(rulesSlice))
    for i, duo := range rulesSlice {
        g.Rules[i] = duo.([]interface{})[0].(*ast.Rule)
    }

    return g, nil
}

Initializer ← code:CodeBlock EOS {
    return code, nil
}

Rule ← name:IdentifierName __ display:( StringLiteral __ )? RuleDefOp __ expr:Expression EOS {
    pos := c.astPos()

    rule := ast.NewRule(pos, name.(*ast.Identifier))
    displaySlice := toIfaceSlice(display)
    if len(displaySlice) > 0 {
        rule.DisplayName = displaySlice[0].(*ast.StringLit)
    }
    rule.Expr = expr.(ast.Expression)

    return rule, nil
}

Expression ← ChoiceExpr

ChoiceExpr ← first:ActionExpr rest:( __ "/" __ ActionExpr )* {
    restSlice := toIfaceSlice(rest)
    if len(restSlice) == 0 {
        return first, nil
    }

    pos := c.astPos()
    choice := ast.NewChoiceExpr(pos)
    choice.Alternatives = []ast.Expression{first.(ast.Expression)}
    for _, sl := range restSlice {
        choice.Alternatives = append(choice.Alternatives, sl.([]interface{})[3].(ast.Expression))
    }
    return choice, nil
}

ActionExpr ← expr:SeqExpr code:( __ CodeBlock )? {
    if code == nil {
        return expr, nil
    }

    pos := c.astPos()
    act := ast.NewActionExpr(pos)
    act.Expr = expr.(ast.Expression)
    codeSlice := toIfaceSlice(code)
    act.Code = codeSlice[1].(*ast.CodeBlock)

    return act, nil
}

SeqExpr ← first:LabeledExpr rest:( __ LabeledExpr )* {
    restSlice := toIfaceSlice(rest)
    if len(restSlice) == 0 {
        return first, nil
    }
    seq := ast.NewSeqExpr(c.astPos())
    seq.Exprs = []ast.Expression{first.(ast.Expression)}
    for _, sl := range restSlice {
        seq.Exprs = append(seq.Exprs, sl.([]interface{})[1].(ast.Expression))
    }
    return seq, nil
}

LabeledExpr ← label:Identifier __ ':' __ expr:PrefixedExpr {
    pos := c.astPos()
    lab := ast.NewLabeledExpr(pos)
    lab.Label = label.(*ast.Identifier)
    lab.Expr = expr.(ast.Expression)
    return lab, nil
} / PrefixedExpr

PrefixedExpr ← op:PrefixedOp __ expr:SuffixedExpr {
    pos := c.astPos()
    opStr := op.(string)
    if opStr == "&" {
        and := ast.NewAndExpr(pos)
        and.Expr = expr.(ast.Expression)
        return and, nil
    }
    not := ast.NewNotExpr(pos)
    not.Expr = expr.(ast.Expression)
    return not, nil
} / SuffixedExpr

PrefixedOp ← ( '&' / '!' ) {
    return string(c.text), nil
}

SuffixedExpr ← expr:PrimaryExpr __ op:SuffixedOp {
    pos := c.astPos()
    opStr := op.(string)
    switch opStr {
    case "?":
        zero := ast.NewZeroOrOneExpr(pos)
        zero.Expr = expr.(ast.Expression)
        return zero, nil
    case "*":
        zero := ast.NewZeroOrMoreExpr(pos)
        zero.Expr = expr.(ast.Expression)
        return zero, nil
    case "+":
        one := ast.NewOneOrMoreExpr(pos)
        one.Expr = expr.(ast.Expression)
        return one, nil
    default:
        return nil, errors.New("unknown operator: " + opStr)
    }
} / PrimaryExpr 

SuffixedOp ← ( '?' / '*' / '+' ) {
    return string(c.text), nil
}

PrimaryExpr ← LitMatcher / CharClassMatcher / AnyMatcher / RuleRefExpr / SemanticPredExpr / "(" __ expr:Expression __ ")" {
    return expr, nil
}
RuleRefExpr ← name:IdentifierName !( __ ( StringLiteral __ )? RuleDefOp ) {
    ref := ast.NewRuleRefExpr(c.astPos())
    ref.Name = name.(*ast.Identifier)
    return ref, nil
}
SemanticPredExpr ← op:SemanticPredOp __ code:CodeBlock {
    opStr := op.(string)
    if opStr == "&" {
        and := ast.NewAndCodeExpr(c.astPos())
        and.Code = code.(*ast.CodeBlock)
        return and, nil
    }
    not := ast.NewNotCodeExpr(c.astPos())
    not.Code = code.(*ast.CodeBlock)
    return not, nil
}
SemanticPredOp ← ( '&' / '!' ) {
    return string(c.text), nil
}

RuleDefOp ← '=' / "<-" / '\u2190' / '\u27f5'

SourceChar ← .
Comment ← MultiLineComment / SingleLineComment
MultiLineComment ← "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator ← "/*" ( !( "*/" / EOL ) SourceChar )* "*/"
SingleLineComment ← "//" ( !EOL SourceChar )*

Identifier ← !ReservedWord ident:IdentifierName {
    return ident, nil
} / ReservedWord {
    return ast.NewIdentifier(c.astPos(), string(c.text)), errors.New("identifier is a reserved word")
}
IdentifierName ← IdentifierStart IdentifierPart* {
    return ast.NewIdentifier(c.astPos(), string(c.text)), nil
}
IdentifierStart ← [\pL_]
IdentifierPart ← IdentifierStart / [\p{Nd}]

LitMatcher ← lit:StringLiteral ignore:"i"? {
    rawStr := lit.(*ast.StringLit).Val
	s, err := strconv.Unquote(rawStr)
    if err != nil {
        return nil, err
    }
    m := ast.NewLitMatcher(c.astPos(), s)
    m.IgnoreCase = ignore != nil
    return m, nil
}
StringLiteral ← ( '"' DoubleStringChar* '"' / "'" SingleStringChar "'" / '`' RawStringChar '`' ) {
    return ast.NewStringLit(c.astPos(), string(c.text)), nil
}
DoubleStringChar ← !( '"' / "\\" / EOL ) SourceChar / "\\" DoubleStringEscape
SingleStringChar ← !( "'" / "\\" / EOL ) SourceChar / "\\" SingleStringEscape
RawStringChar ← !'`' SourceChar

DoubleStringEscape ← "'" / CommonEscapeSequence
SingleStringEscape ← '"' / CommonEscapeSequence

CommonEscapeSequence ← SingleCharEscape / OctalEscape / HexEscape / LongUnicodeEscape / ShortUnicodeEscape
SingleCharEscape ← 'a' / 'b' / 'n' / 'f' / 'r' / 't' / 'v' / '\\'
OctalEscape ← OctalDigit OctalDigit OctalDigit
HexEscape ← 'x' HexDigit HexDigit
LongUnicodeEscape ← 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit
ShortUnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit

OctalDigit ← [0-7]
DecimalDigit ← [0-9]
HexDigit ← [0-9a-f]i

CharClassMatcher ← '[' ( ClassCharRange / ClassChar / "\\" UnicodeClassEscape )* ']' 'i'? {
    pos := c.astPos()
    cc := ast.NewCharClassMatcher(pos, string(c.text))
    return cc, nil
}
ClassCharRange ← ClassChar '-' ClassChar
ClassChar ← !( "]" / "\\" / EOL ) SourceChar / "\\" CharClassEscape
CharClassEscape ← ']' / CommonEscapeSequence

UnicodeClassEscape ← 'p' ( 
      SingleCharUnicodeClass
    / '{' UnicodeClass '}'
    / . { return nil, errors.New("invalid Unicode class escape") }
    )
SingleCharUnicodeClass ← [LMNCPZS]

// Unicode classes list generated by misc/cmd/unicode-classes
UnicodeClass ← "Other_Default_Ignorable_Code_Point"
    / "Noncharacter_Code_Point"
    / "Logical_Order_Exception"
    / "Inscriptional_Parthian"
    / "Other_Grapheme_Extend"
    / "Inscriptional_Pahlavi"
    / "Terminal_Punctuation"
    / "Meroitic_Hieroglyphs"
    / "IDS_Trinary_Operator"
    / "Egyptian_Hieroglyphs"
    / "Pattern_White_Space"
    / "IDS_Binary_Operator"
    / "Canadian_Aboriginal"
    / "Variation_Selector"
    / "Caucasian_Albanian"
    / "Unified_Ideograph"
    / "Other_ID_Continue"
    / "Old_South_Arabian"
    / "Old_North_Arabian"
    / "Other_Alphabetic"
    / "Meroitic_Cursive"
    / "Imperial_Aramaic"
    / "Psalter_Pahlavi"
    / "Other_Uppercase"
    / "Other_Lowercase"
    / "ASCII_Hex_Digit"
    / "Quotation_Mark"
    / "Pattern_Syntax"
    / "Other_ID_Start"
    / "Mende_Kikakui"
    / "Syloti_Nagri"
    / "Sora_Sompeng"
    / "Pahawh_Hmong"
    / "Meetei_Mayek"
    / "Join_Control"
    / "Bidi_Control"
    / "White_Space"
    / "Warang_Citi"
    / "Soft_Dotted"
    / "Pau_Cin_Hau"
    / "Old_Persian"
    / "New_Tai_Lue"
    / "Ideographic"
    / "Saurashtra"
    / "Phoenician"
    / "Other_Math"
    / "Old_Turkic"
    / "Old_Permic"
    / "Old_Italic"
    / "Manichaean"
    / "Kharoshthi"
    / "Glagolitic"
    / "Devanagari"
    / "Deprecated"
    / "Sundanese"
    / "Samaritan"
    / "Palmyrene"
    / "Nabataean"
    / "Mongolian"
    / "Malayalam"
    / "Khudawadi"
    / "Inherited"
    / "Hex_Digit"
    / "Diacritic"
    / "Cuneiform"
    / "Bassa_Vah"
    / "Ugaritic"
    / "Tifinagh"
    / "Tai_Viet"
    / "Tai_Tham"
    / "Tagbanwa"
    / "Phags_Pa"
    / "Ol_Chiki"
    / "Mahajani"
    / "Linear_B"
    / "Linear_A"
    / "Kayah_Li"
    / "Katakana"
    / "Javanese"
    / "Hiragana"
    / "Gurmukhi"
    / "Gujarati"
    / "Georgian"
    / "Extender"
    / "Ethiopic"
    / "Duployan"
    / "Cyrillic"
    / "Cherokee"
    / "Buginese"
    / "Bopomofo"
    / "Balinese"
    / "Armenian"
    / "Tirhuta"
    / "Tibetan"
    / "Tagalog"
    / "Sinhala"
    / "Siddham"
    / "Shavian"
    / "Sharada"
    / "Radical"
    / "Osmanya"
    / "Myanmar"
    / "Mandaic"
    / "Kannada"
    / "Hanunoo"
    / "Grantha"
    / "Elbasan"
    / "Deseret"
    / "Cypriot"
    / "Braille"
    / "Bengali"
    / "Avestan"
    / "Thaana"
    / "Telugu"
    / "Tai_Le"
    / "Syriac"
    / "Rejang"
    / "Lydian"
    / "Lycian"
    / "Lepcha"
    / "Khojki"
    / "Kaithi"
    / "Hyphen"
    / "Hebrew"
    / "Hangul"
    / "Gothic"
    / "Coptic"
    / "Common"
    / "Chakma"
    / "Carian"
    / "Brahmi"
    / "Arabic"
    / "Tamil"
    / "Takri"
    / "STerm"
    / "Runic"
    / "Oriya"
    / "Ogham"
    / "Limbu"
    / "Latin"
    / "Khmer"
    / "Greek"
    / "Buhid"
    / "Batak"
    / "Bamum"
    / "Thai"
    / "Modi"
    / "Miao"
    / "Lisu"
    / "Dash"
    / "Cham"
    / "Vai"
    / "Nko"
    / "Mro"
    / "Lao"
    / "Han"
    / "Zs"
    / "Zp"
    / "Zl"
    / "Yi"
    / "So"
    / "Sm"
    / "Sk"
    / "Sc"
    / "Ps"
    / "Po"
    / "Pi"
    / "Pf"
    / "Pe"
    / "Pd"
    / "Pc"
    / "No"
    / "Nl"
    / "Nd"
    / "Mn"
    / "Me"
    / "Mc"
    / "Lu"
    / "Lt"
    / "Lo"
    / "Lm"
    / "Ll"
    / "Cs"
    / "Co"
    / "Cf"
    / "Cc"
    / "Z"
    / "S"
    / "P"
    / "N"
    / "M"
    / "L"
    / "C"

ReservedWord ←
	// Go keywords http://golang.org/ref/spec#Keywords

	"break" !IdentifierPart
	/ "case" !IdentifierPart
	/ "chan" !IdentifierPart
	/ "const" !IdentifierPart
	/ "continue" !IdentifierPart
	/ "default" !IdentifierPart
	/ "defer" !IdentifierPart
	/ "else" !IdentifierPart
	/ "fallthrough" !IdentifierPart
	/ "for" !IdentifierPart
	/ "func" !IdentifierPart
	/ "goto" !IdentifierPart
	/ "go" !IdentifierPart
	/ "if" !IdentifierPart
	/ "import" !IdentifierPart
	/ "interface" !IdentifierPart
	/ "map" !IdentifierPart
	/ "package" !IdentifierPart
	/ "range" !IdentifierPart
	/ "return" !IdentifierPart
	/ "select" !IdentifierPart
	/ "struct" !IdentifierPart
	/ "switch" !IdentifierPart
	/ "type" !IdentifierPart
	/ "var" !IdentifierPart

	// predeclared identifiers http://golang.org/ref/spec#Predeclared_identifiers

	/ "bool" !IdentifierPart
	/ "byte" !IdentifierPart
	/ "complex64" !IdentifierPart
	/ "complex128" !IdentifierPart
	/ "error" !IdentifierPart
	/ "float32" !IdentifierPart
	/ "float64" !IdentifierPart
	/ "int8" !IdentifierPart
	/ "int16" !IdentifierPart
	/ "int32" !IdentifierPart
	/ "int64" !IdentifierPart
	/ "int" !IdentifierPart
	/ "rune" !IdentifierPart
	/ "string" !IdentifierPart
	/ "uint8" !IdentifierPart
	/ "uint16" !IdentifierPart
	/ "uint32" !IdentifierPart
	/ "uint64" !IdentifierPart
	/ "uintptr" !IdentifierPart
	/ "uint" !IdentifierPart
	/ "true" !IdentifierPart
	/ "false" !IdentifierPart
	/ "iota" !IdentifierPart
	/ "nil" !IdentifierPart
	/ "append" !IdentifierPart
	/ "cap" !IdentifierPart
	/ "close" !IdentifierPart
	/ "complex" !IdentifierPart
	/ "copy" !IdentifierPart
	/ "delete" !IdentifierPart
	/ "imag" !IdentifierPart
	/ "len" !IdentifierPart
	/ "make" !IdentifierPart
	/ "new" !IdentifierPart
	/ "panic" !IdentifierPart
	/ "println" !IdentifierPart
	/ "print" !IdentifierPart
	/ "real" !IdentifierPart
	/ "recover" !IdentifierPart

AnyMatcher ← "." {
    any := ast.NewAnyMatcher(c.astPos(), ".")
    return any, nil
}

CodeBlock ← "{" Code "}" {
    pos := c.astPos()
    cb := ast.NewCodeBlock(pos, string(c.text))
    return cb, nil
}

Code ← ( ( ![{}] SourceChar )+ / "{" Code "}" )*

__ ← ( Whitespace / EOL / Comment )*
_ ← ( Whitespace / MultiLineCommentNoLineTerminator )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOS ← __ ';' / _ SingleLineComment? EOL / __ EOF

EOF ← !.

