package parser

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/PuerkitoBio/exp/peg/ast"
)

// Generated parser would expose the following functions:
//
// func ParseFile(filename string) (interface{}, error) {
// 	f, err := os.Open(filename)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer f.Close()
// 	return Parse(filename, f)
// }
//
// func Parse(filename string, r io.Reader) (interface{}, error) {
// 	// g := grammar generated by buildParser()
// 	return parseUsingAST(filename, r, g)
// }

func parseUsingAST(filename string, r io.Reader, g *ast.Grammar) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	p := &parser{filename: filename, data: b, cur: 0}
	return p.parse(g)
}

type parser struct {
	filename string
	data     []byte
	cur      int
	rules    map[string]*ast.Rule
}

func (p *parser) buildRulesTable(g *ast.Grammar) {
	p.rules = make(map[string]*ast.Rule, len(g.Rules))
	for _, r := range g.Rules {
		p.rules[r.Name.Val] = r
	}
}

func (p *parser) parse(g *ast.Grammar) (interface{}, error) {
	if len(g.Rules) == 0 {
		// TODO: Valid or not?
		return nil, nil
	}

	p.buildRulesTable(g)

	// start rule is rule [0]
	return p.parseRule(g.Rules[0])
}

func (p *parser) parseRule(rule *ast.Rule) (interface{}, error) {
	v, err := p.parseExpr(rule.Expr)
	if err != nil {
		// TODO : wrap in error with DisplayName?
	}
	return v, err
}

func (p *parser) parseExpr(expr ast.Expression) (interface{}, error) {
	switch expr := expr.(type) {
	case *ast.ActionExpr:
		return p.parseActionExpr(expr)
	case *ast.AndCodeExpr:
		return p.parseAndCodeExpr(expr)
	case *ast.AndExpr:
		return p.parseAndExpr(expr)
	case *ast.AnyMatcher:
		return p.parseAnyMatcher(expr)
	case *ast.CharClassMatcher:
		return p.parseCharClassMatcher(expr)
	case *ast.ChoiceExpr:
		return p.parseChoiceExpr(expr)
	case *ast.LabeledExpr:
		return p.parseLabeledExpr(expr)
	case *ast.LitMatcher:
		return p.parseLitMatcher(expr)
	case *ast.NotCodeExpr:
		return p.parseNotCodeExpr(expr)
	case *ast.NotExpr:
		return p.parseNotExpr(expr)
	case *ast.OneOrMoreExpr:
		return p.parseOneOrMoreExpr(expr)
	case *ast.RuleRefExpr:
		return p.parseRuleRefExpr(expr)
	case *ast.SeqExpr:
		return p.parseSeqExpr(expr)
	case *ast.ZeroOrMoreExpr:
		return p.parseZeroOrMoreExpr(expr)
	case *ast.ZeroOrOneExpr:
		return p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression tye %T", expr))
	}
}
