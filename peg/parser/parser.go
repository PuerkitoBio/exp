package parser

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"unicode/utf8"

	"github.com/PuerkitoBio/exp/peg/ast"
)

// Generated parser would expose the following functions:
//
// func ParseFile(filename string) (interface{}, error) {
// 	f, err := os.Open(filename)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer f.Close()
// 	return Parse(filename, f)
// }
//
// func Parse(filename string, r io.Reader) (interface{}, error) {
// 	// g := grammar generated by buildParser()
// 	return parseUsingAST(filename, r, g)
// }

type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e *errList) err() error {
	if len(*e) == 0 {
		return nil
	}
	return e
}

func (e *errList) Error() string {
	switch len(*e) {
	case 0:
		return ""
	case 1:
		return (*e)[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range *e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

func parseUsingAST(filename string, r io.Reader, g *ast.Grammar) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	p := &parser{filename: filename, errs: new(errList), data: b}
	return p.parse(g)
}

type parser struct {
	filename string
	errs     *errList
	data     []byte
	i        int
	rn       rune
	rules    map[string]*ast.Rule

	peekDepth int
}

// read advances the parser to the next rune.
func (p *parser) read() {
	rn, n := utf8.DecodeRune(p.data[p.i:])
	p.i += n
	p.rn = rn
}

func (p *parser) buildRulesTable(g *ast.Grammar) {
	p.rules = make(map[string]*ast.Rule, len(g.Rules))
	for _, r := range g.Rules {
		p.rules[r.Name.Val] = r
	}
}

func (p *parser) parse(g *ast.Grammar) (interface{}, error) {
	if len(g.Rules) == 0 {
		// TODO: Valid or not?
		return nil, nil
	}

	p.buildRulesTable(g)

	// start rule is rule [0]
	val, ok := p.parseRule(g.Rules[0])
	if !ok {
		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func (p *parser) parseRule(rule *ast.Rule) (interface{}, bool) {
	return p.parseExpr(rule.Expr)
}

func (p *parser) parseExpr(expr ast.Expression) (interface{}, bool) {
	switch expr := expr.(type) {
	case *ast.ActionExpr:
		return p.parseActionExpr(expr)
	case *ast.AndCodeExpr:
		return p.parseAndCodeExpr(expr)
	case *ast.AndExpr:
		return p.parseAndExpr(expr)
	case *ast.AnyMatcher:
		return p.parseAnyMatcher(expr)
	case *ast.CharClassMatcher:
		return p.parseCharClassMatcher(expr)
	case *ast.ChoiceExpr:
		return p.parseChoiceExpr(expr)
	case *ast.LabeledExpr:
		return p.parseLabeledExpr(expr)
	case *ast.LitMatcher:
		return p.parseLitMatcher(expr)
	case *ast.NotCodeExpr:
		return p.parseNotCodeExpr(expr)
	case *ast.NotExpr:
		return p.parseNotExpr(expr)
	case *ast.OneOrMoreExpr:
		return p.parseOneOrMoreExpr(expr)
	case *ast.RuleRefExpr:
		return p.parseRuleRefExpr(expr)
	case *ast.SeqExpr:
		return p.parseSeqExpr(expr)
	case *ast.ZeroOrMoreExpr:
		return p.parseZeroOrMoreExpr(expr)
	case *ast.ZeroOrOneExpr:
		return p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression tye %T", expr))
	}
}

func (p *parser) parseActionExpr(act *ast.ActionExpr) (interface{}, bool) {
	val, ok := p.parseExpr(act.Expr)
	if ok {
		// TODO : invoke code function
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *ast.AndCodeExpr) (interface{}, bool) {
	// TODO : invoke code function
	// val, err := p.invoke(and.Code)
	// ok := val.(bool)
	return nil, ok
}

func (p *parser) parseAndExpr(and *ast.AndExpr) (interface{}, bool) {
	p.peekDepth++
	i := p.cur
	_, ok := p.parseExpr(and.Expr)
	p.cur = i
	p.peekDepth--
	return nil, ok
}

func (p *parser) parseAnyMatcher(any *ast.AnyMatcher) (interface{}, bool) {
	if p.cur+1 < len(p.data) {
		p.read()
		return string(p.rn), true
	}
	return nil, false
}

func (p *parser) parseCharClassMatcher(chr *ast.CharClassMatcher) (interface{}, bool) {

}
