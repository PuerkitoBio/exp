Grammar = __ Rule+ EndOfFile

Rule = IdentifierName ( StringLiteral )? RuleDefOp Expression EndOfRule

Expression = OptExpr

OptExpr = ActionExpr ( "/" __ ActionExpr )*

ActionExpr = SeqExpr ( CodeBlock )?

SeqExpr = LabeledExpr ( LabeledExpr )*

LabeledExpr = Identifier ":" __ PrefixedExpr / PrefixedExpr

PrefixedExpr = PrefixedOp SuffixedExpr / SuffixedExpr

PrefixedOp = ( "$" / "&" / "!" ) __

SuffixedExpr = PrimaryExpr SuffixedOp / PrimaryExpr 

SuffixedOp = ( "?" / "*" / "+" ) __

PrimaryExpr = LiteralMatcher / CharClassMatcher / AnyMatcher / RuleRefExpr / SemanticPredExpr / "(" __ Expression ")" __

RuleRefExpr = IdentifierName !( ( StringLiteral )? "=" )

SemanticPredExpr = SemanticPredOp CodeBlock

SemanticPredOp = ( "&" / "!" ) __

RuleDefOp = ( "=" / "<-" / '\u2190' / '\u27f5' ) __

SourceChar = .

Whitespace = "\t" / "\v" / "\f" / " " / "\u00a0" / "\ufeff" / Zs

LineTerminator = [\n\r\u2028\u2029]

LineTerminatorSequence = "\n" / "\r\n" / "\r" / "\u2028" / "\u2029"

Comment = MultiLineComment / SingleLineComment 

MultiLineComment = "/*" ( !"*/" SourceCharacter )* "*/" __

MultiLineCommentNoLineTerminator = "/*" ( !( "*/" / LineTerminator ) SourceCharacter )* "*/" __

SingleLineComment = "//" ( !LineTerminator SourceCharacter )*

Identifier = IdentifierName

IdentifierName = IdentifierStart IdentifierPart*

IdentifierStart = [a-zA-Z_]

IdentifierPart = IdentifierStart / [0-9]

LiteralMatcher = StringLiteral "i"? __

StringLiteral = '"' DoubleStringChar* '"' / "'" SingleStringChar* "'"

DoubleStringChar = !( '"' / "\\" / LineTerminator ) SourceCharacter 

SingleStringChar = !( "'" / "\\" / LineTerminator ) SourceCharacter

CharClassMatcher = "[" "^"? ( ClassCharRange / ClassChar )* "]" "i"?

ClassCharRange = ClassChar "-" ClassChar

ClassChar = !( "]" / "\\" / LineTerminator ) SourceCharacter 

AnyMatcher = "."

CodeBlock = "{" __ Code "}" __

__ = [ \n\r\t]*

EndOfRule = ";" __ / SingleLineComment? EndOfLine / EndOfFile

EndOfFile = !.
